/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class tair_serv
{
    public interface Iface
    {
        bool Tair_begin(string master_addr, string slave_addr, string group_name);
#if SILVERLIGHT
    IAsyncResult Begin_Tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name);
    bool End_Tair_begin(IAsyncResult asyncResult);
#endif
        void Tair_set_loglevel(string level);
#if SILVERLIGHT
    IAsyncResult Begin_Tair_set_loglevel(AsyncCallback callback, object state, string level);
    void End_Tair_set_loglevel(IAsyncResult asyncResult);
#endif
        long Tair_put(long area, string key, string data, long expire, long version);
#if SILVERLIGHT
    IAsyncResult Begin_Tair_put(AsyncCallback callback, object state, long area, string key, string data, long expire, long version);
    long End_Tair_put(IAsyncResult asyncResult);
#endif
        string Tair_get(long area, string key);
#if SILVERLIGHT
    IAsyncResult Begin_Tair_get(AsyncCallback callback, object state, long area, string key);
    string End_Tair_get(IAsyncResult asyncResult);
#endif
        long Tair_remove(long area, string key);
#if SILVERLIGHT
    IAsyncResult Begin_Tair_remove(AsyncCallback callback, object state, long area, string key);
    long End_Tair_remove(IAsyncResult asyncResult);
#endif
    }

    public class Client : IDisposable, Iface
    {
        public Client(TProtocol prot)
            : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected int seqid_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion



#if SILVERLIGHT
    public IAsyncResult Begin_Tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name)
    {
      return send_Tair_begin(callback, state, master_addr, slave_addr, group_name);
    }

    public bool End_Tair_begin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Tair_begin();
    }

#endif

        public bool Tair_begin(string master_addr, string slave_addr, string group_name)
        {
#if !SILVERLIGHT
            send_Tair_begin(master_addr, slave_addr, group_name);
            return recv_Tair_begin();

#else
      var asyncResult = Begin_Tair_begin(null, null, master_addr, slave_addr, group_name);
      return End_Tair_begin(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_Tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name)
#else
        public void send_Tair_begin(string master_addr, string slave_addr, string group_name)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("Tair_begin", TMessageType.Call, seqid_));
            Tair_begin_args args = new Tair_begin_args();
            args.Master_addr = master_addr;
            args.Slave_addr = slave_addr;
            args.Group_name = group_name;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public bool recv_Tair_begin()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Tair_begin_result result = new Tair_begin_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tair_begin failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_Tair_set_loglevel(AsyncCallback callback, object state, string level)
    {
      return send_Tair_set_loglevel(callback, state, level);
    }

    public void End_Tair_set_loglevel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_Tair_set_loglevel();
    }

#endif

        public void Tair_set_loglevel(string level)
        {
#if !SILVERLIGHT
            send_Tair_set_loglevel(level);
            recv_Tair_set_loglevel();

#else
      var asyncResult = Begin_Tair_set_loglevel(null, null, level);
      End_Tair_set_loglevel(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_Tair_set_loglevel(AsyncCallback callback, object state, string level)
#else
        public void send_Tair_set_loglevel(string level)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("Tair_set_loglevel", TMessageType.Call, seqid_));
            Tair_set_loglevel_args args = new Tair_set_loglevel_args();
            args.Level = level;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public void recv_Tair_set_loglevel()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Tair_set_loglevel_result result = new Tair_set_loglevel_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            return;
        }


#if SILVERLIGHT
    public IAsyncResult Begin_Tair_put(AsyncCallback callback, object state, long area, string key, string data, long expire, long version)
    {
      return send_Tair_put(callback, state, area, key, data, expire, version);
    }

    public long End_Tair_put(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Tair_put();
    }

#endif

        public long Tair_put(long area, string key, string data, long expire, long version)
        {
#if !SILVERLIGHT
            send_Tair_put(area, key, data, expire, version);
            return recv_Tair_put();

#else
      var asyncResult = Begin_Tair_put(null, null, area, key, data, expire, version);
      return End_Tair_put(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_Tair_put(AsyncCallback callback, object state, long area, string key, string data, long expire, long version)
#else
        public void send_Tair_put(long area, string key, string data, long expire, long version)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("Tair_put", TMessageType.Call, seqid_));
            Tair_put_args args = new Tair_put_args();
            args.Area = area;
            args.Key = key;
            args.Data = data;
            args.Expire = expire;
            args.Version = version;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public long recv_Tair_put()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Tair_put_result result = new Tair_put_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tair_put failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_Tair_get(AsyncCallback callback, object state, long area, string key)
    {
      return send_Tair_get(callback, state, area, key);
    }

    public string End_Tair_get(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Tair_get();
    }

#endif

        public string Tair_get(long area, string key)
        {
#if !SILVERLIGHT
            send_Tair_get(area, key);
            return recv_Tair_get();

#else
      var asyncResult = Begin_Tair_get(null, null, area, key);
      return End_Tair_get(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_Tair_get(AsyncCallback callback, object state, long area, string key)
#else
        public void send_Tair_get(long area, string key)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("Tair_get", TMessageType.Call, seqid_));
            Tair_get_args args = new Tair_get_args();
            args.Area = area;
            args.Key = key;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public string recv_Tair_get()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Tair_get_result result = new Tair_get_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tair_get failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_Tair_remove(AsyncCallback callback, object state, long area, string key)
    {
      return send_Tair_remove(callback, state, area, key);
    }

    public long End_Tair_remove(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Tair_remove();
    }

#endif

        public long Tair_remove(long area, string key)
        {
#if !SILVERLIGHT
            send_Tair_remove(area, key);
            return recv_Tair_remove();

#else
      var asyncResult = Begin_Tair_remove(null, null, area, key);
      return End_Tair_remove(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_Tair_remove(AsyncCallback callback, object state, long area, string key)
#else
        public void send_Tair_remove(long area, string key)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("Tair_remove", TMessageType.Call, seqid_));
            Tair_remove_args args = new Tair_remove_args();
            args.Area = area;
            args.Key = key;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public long recv_Tair_remove()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Tair_remove_result result = new Tair_remove_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Tair_remove failed: unknown result");
        }

    }
    public class Processor : TProcessor
    {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["Tair_begin"] = Tair_begin_Process;
            processMap_["Tair_set_loglevel"] = Tair_set_loglevel_Process;
            processMap_["Tair_put"] = Tair_put_Process;
            processMap_["Tair_get"] = Tair_get_Process;
            processMap_["Tair_remove"] = Tair_remove_Process;
        }

        protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null)
                {
                    TProtocolUtil.Skip(iprot, TType.Struct);
                    iprot.ReadMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                    x.Write(oprot);
                    oprot.WriteMessageEnd();
                    oprot.Transport.Flush();
                    return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (IOException)
            {
                return false;
            }
            return true;
        }

        public void Tair_begin_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Tair_begin_args args = new Tair_begin_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            Tair_begin_result result = new Tair_begin_result();
            result.Success = iface_.Tair_begin(args.Master_addr, args.Slave_addr, args.Group_name);
            oprot.WriteMessageBegin(new TMessage("Tair_begin", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Tair_set_loglevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Tair_set_loglevel_args args = new Tair_set_loglevel_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            Tair_set_loglevel_result result = new Tair_set_loglevel_result();
            iface_.Tair_set_loglevel(args.Level);
            oprot.WriteMessageBegin(new TMessage("Tair_set_loglevel", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Tair_put_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Tair_put_args args = new Tair_put_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            Tair_put_result result = new Tair_put_result();
            result.Success = iface_.Tair_put(args.Area, args.Key, args.Data, args.Expire, args.Version);
            oprot.WriteMessageBegin(new TMessage("Tair_put", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Tair_get_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Tair_get_args args = new Tair_get_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            Tair_get_result result = new Tair_get_result();
            result.Success = iface_.Tair_get(args.Area, args.Key);
            oprot.WriteMessageBegin(new TMessage("Tair_get", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Tair_remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Tair_remove_args args = new Tair_remove_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            Tair_remove_result result = new Tair_remove_result();
            result.Success = iface_.Tair_remove(args.Area, args.Key);
            oprot.WriteMessageBegin(new TMessage("Tair_remove", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_begin_args : TBase
    {
        private string _master_addr;
        private string _slave_addr;
        private string _group_name;

        public string Master_addr
        {
            get
            {
                return _master_addr;
            }
            set
            {
                __isset.master_addr = true;
                this._master_addr = value;
            }
        }

        public string Slave_addr
        {
            get
            {
                return _slave_addr;
            }
            set
            {
                __isset.slave_addr = true;
                this._slave_addr = value;
            }
        }

        public string Group_name
        {
            get
            {
                return _group_name;
            }
            set
            {
                __isset.group_name = true;
                this._group_name = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool master_addr;
            public bool slave_addr;
            public bool group_name;
        }

        public Tair_begin_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Master_addr = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Slave_addr = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                Group_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_begin_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Master_addr != null && __isset.master_addr)
                {
                    field.Name = "master_addr";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Master_addr);
                    oprot.WriteFieldEnd();
                }
                if (Slave_addr != null && __isset.slave_addr)
                {
                    field.Name = "slave_addr";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Slave_addr);
                    oprot.WriteFieldEnd();
                }
                if (Group_name != null && __isset.group_name)
                {
                    field.Name = "group_name";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Group_name);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_begin_args(");
            bool __first = true;
            if (Master_addr != null && __isset.master_addr)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Master_addr: ");
                __sb.Append(Master_addr);
            }
            if (Slave_addr != null && __isset.slave_addr)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Slave_addr: ");
                __sb.Append(Slave_addr);
            }
            if (Group_name != null && __isset.group_name)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Group_name: ");
                __sb.Append(Group_name);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_begin_result : TBase
    {
        private bool _success;

        public bool Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public Tair_begin_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_begin_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_begin_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_set_loglevel_args : TBase
    {
        private string _level;

        public string Level
        {
            get
            {
                return _level;
            }
            set
            {
                __isset.level = true;
                this._level = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool level;
        }

        public Tair_set_loglevel_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Level = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_set_loglevel_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Level != null && __isset.level)
                {
                    field.Name = "level";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Level);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_set_loglevel_args(");
            bool __first = true;
            if (Level != null && __isset.level)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Level: ");
                __sb.Append(Level);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_set_loglevel_result : TBase
    {

        public Tair_set_loglevel_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_set_loglevel_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_set_loglevel_result(");
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_put_args : TBase
    {
        private long _area;
        private string _key;
        private string _data;
        private long _expire;
        private long _version;

        public long Area
        {
            get
            {
                return _area;
            }
            set
            {
                __isset.area = true;
                this._area = value;
            }
        }

        public string Key
        {
            get
            {
                return _key;
            }
            set
            {
                __isset.key = true;
                this._key = value;
            }
        }

        public string Data
        {
            get
            {
                return _data;
            }
            set
            {
                __isset.data = true;
                this._data = value;
            }
        }

        public long Expire
        {
            get
            {
                return _expire;
            }
            set
            {
                __isset.expire = true;
                this._expire = value;
            }
        }

        public long Version
        {
            get
            {
                return _version;
            }
            set
            {
                __isset.version = true;
                this._version = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool area;
            public bool key;
            public bool data;
            public bool expire;
            public bool version;
        }

        public Tair_put_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I64)
                            {
                                Area = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Key = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                Data = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                Expire = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I64)
                            {
                                Version = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_put_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.area)
                {
                    field.Name = "area";
                    field.Type = TType.I64;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Area);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key)
                {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                if (Data != null && __isset.data)
                {
                    field.Name = "data";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Data);
                    oprot.WriteFieldEnd();
                }
                if (__isset.expire)
                {
                    field.Name = "expire";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Expire);
                    oprot.WriteFieldEnd();
                }
                if (__isset.version)
                {
                    field.Name = "version";
                    field.Type = TType.I64;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Version);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_put_args(");
            bool __first = true;
            if (__isset.area)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Area: ");
                __sb.Append(Area);
            }
            if (Key != null && __isset.key)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Key: ");
                __sb.Append(Key);
            }
            if (Data != null && __isset.data)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Data: ");
                __sb.Append(Data);
            }
            if (__isset.expire)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Expire: ");
                __sb.Append(Expire);
            }
            if (__isset.version)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Version: ");
                __sb.Append(Version);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_put_result : TBase
    {
        private long _success;

        public long Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public Tair_put_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I64)
                            {
                                Success = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_put_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I64;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_put_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_get_args : TBase
    {
        private long _area;
        private string _key;

        public long Area
        {
            get
            {
                return _area;
            }
            set
            {
                __isset.area = true;
                this._area = value;
            }
        }

        public string Key
        {
            get
            {
                return _key;
            }
            set
            {
                __isset.key = true;
                this._key = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool area;
            public bool key;
        }

        public Tair_get_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I64)
                            {
                                Area = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Key = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_get_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.area)
                {
                    field.Name = "area";
                    field.Type = TType.I64;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Area);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key)
                {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_get_args(");
            bool __first = true;
            if (__isset.area)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Area: ");
                __sb.Append(Area);
            }
            if (Key != null && __isset.key)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Key: ");
                __sb.Append(Key);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_get_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public Tair_get_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_get_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_get_result(");
            bool __first = true;
            if (Success != null && __isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_remove_args : TBase
    {
        private long _area;
        private string _key;

        public long Area
        {
            get
            {
                return _area;
            }
            set
            {
                __isset.area = true;
                this._area = value;
            }
        }

        public string Key
        {
            get
            {
                return _key;
            }
            set
            {
                __isset.key = true;
                this._key = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool area;
            public bool key;
        }

        public Tair_remove_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I64)
                            {
                                Area = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Key = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_remove_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.area)
                {
                    field.Name = "area";
                    field.Type = TType.I64;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Area);
                    oprot.WriteFieldEnd();
                }
                if (Key != null && __isset.key)
                {
                    field.Name = "key";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Key);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_remove_args(");
            bool __first = true;
            if (__isset.area)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Area: ");
                __sb.Append(Area);
            }
            if (Key != null && __isset.key)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Key: ");
                __sb.Append(Key);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class Tair_remove_result : TBase
    {
        private long _success;

        public long Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public Tair_remove_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I64)
                            {
                                Success = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("Tair_remove_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I64;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Tair_remove_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
