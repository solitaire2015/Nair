/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tair_serv_H
#define tair_serv_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tair_service_types.h"

namespace tair_thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class tair_servIf {
 public:
  virtual ~tair_servIf() {}
  virtual int32_t Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name) = 0;
  virtual void Tair_set_loglevel(const std::string& level) = 0;
  virtual int32_t Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version) = 0;
  virtual int32_t Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data) = 0;
  virtual int32_t Tair_remove(const int32_t area, const Tair_data_pair& key) = 0;
};

class tair_servIfFactory {
 public:
  typedef tair_servIf Handler;

  virtual ~tair_servIfFactory() {}

  virtual tair_servIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(tair_servIf* /* handler */) = 0;
};

class tair_servIfSingletonFactory : virtual public tair_servIfFactory {
 public:
  tair_servIfSingletonFactory(const boost::shared_ptr<tair_servIf>& iface) : iface_(iface) {}
  virtual ~tair_servIfSingletonFactory() {}

  virtual tair_servIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(tair_servIf* /* handler */) {}

 protected:
  boost::shared_ptr<tair_servIf> iface_;
};

class tair_servNull : virtual public tair_servIf {
 public:
  virtual ~tair_servNull() {}
  int32_t Tair_begin(const std::string& /* master_addr */, const std::string& /* slave_addr */, const std::string& /* group_name */) {
    int32_t _return = 0;
    return _return;
  }
  void Tair_set_loglevel(const std::string& /* level */) {
    return;
  }
  int32_t Tair_put(const int32_t /* area */, const Tair_data_pair& /* key */, const Tair_data_pair& /* data */, const int32_t /* expire */, const int32_t /* version */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Tair_get(const int32_t /* are */, const Tair_data_pair& /* key */, const Tair_data_pair& /* data */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Tair_remove(const int32_t /* area */, const Tair_data_pair& /* key */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _tair_serv_Tair_begin_args__isset {
  _tair_serv_Tair_begin_args__isset() : master_addr(false), slave_addr(false), group_name(false) {}
  bool master_addr :1;
  bool slave_addr :1;
  bool group_name :1;
} _tair_serv_Tair_begin_args__isset;

class tair_serv_Tair_begin_args {
 public:

  tair_serv_Tair_begin_args(const tair_serv_Tair_begin_args&);
  tair_serv_Tair_begin_args& operator=(const tair_serv_Tair_begin_args&);
  tair_serv_Tair_begin_args() : master_addr(), slave_addr(), group_name() {
  }

  virtual ~tair_serv_Tair_begin_args() throw();
  std::string master_addr;
  std::string slave_addr;
  std::string group_name;

  _tair_serv_Tair_begin_args__isset __isset;

  void __set_master_addr(const std::string& val);

  void __set_slave_addr(const std::string& val);

  void __set_group_name(const std::string& val);

  bool operator == (const tair_serv_Tair_begin_args & rhs) const
  {
    if (!(master_addr == rhs.master_addr))
      return false;
    if (!(slave_addr == rhs.slave_addr))
      return false;
    if (!(group_name == rhs.group_name))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_begin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_begin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_begin_pargs {
 public:


  virtual ~tair_serv_Tair_begin_pargs() throw();
  const std::string* master_addr;
  const std::string* slave_addr;
  const std::string* group_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_begin_result__isset {
  _tair_serv_Tair_begin_result__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_begin_result__isset;

class tair_serv_Tair_begin_result {
 public:

  tair_serv_Tair_begin_result(const tair_serv_Tair_begin_result&);
  tair_serv_Tair_begin_result& operator=(const tair_serv_Tair_begin_result&);
  tair_serv_Tair_begin_result() : success(0) {
  }

  virtual ~tair_serv_Tair_begin_result() throw();
  int32_t success;

  _tair_serv_Tair_begin_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const tair_serv_Tair_begin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_begin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_begin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_begin_presult__isset {
  _tair_serv_Tair_begin_presult__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_begin_presult__isset;

class tair_serv_Tair_begin_presult {
 public:


  virtual ~tair_serv_Tair_begin_presult() throw();
  int32_t* success;

  _tair_serv_Tair_begin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tair_serv_Tair_set_loglevel_args__isset {
  _tair_serv_Tair_set_loglevel_args__isset() : level(false) {}
  bool level :1;
} _tair_serv_Tair_set_loglevel_args__isset;

class tair_serv_Tair_set_loglevel_args {
 public:

  tair_serv_Tair_set_loglevel_args(const tair_serv_Tair_set_loglevel_args&);
  tair_serv_Tair_set_loglevel_args& operator=(const tair_serv_Tair_set_loglevel_args&);
  tair_serv_Tair_set_loglevel_args() : level() {
  }

  virtual ~tair_serv_Tair_set_loglevel_args() throw();
  std::string level;

  _tair_serv_Tair_set_loglevel_args__isset __isset;

  void __set_level(const std::string& val);

  bool operator == (const tair_serv_Tair_set_loglevel_args & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_set_loglevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_set_loglevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_set_loglevel_pargs {
 public:


  virtual ~tair_serv_Tair_set_loglevel_pargs() throw();
  const std::string* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_set_loglevel_result {
 public:

  tair_serv_Tair_set_loglevel_result(const tair_serv_Tair_set_loglevel_result&);
  tair_serv_Tair_set_loglevel_result& operator=(const tair_serv_Tair_set_loglevel_result&);
  tair_serv_Tair_set_loglevel_result() {
  }

  virtual ~tair_serv_Tair_set_loglevel_result() throw();

  bool operator == (const tair_serv_Tair_set_loglevel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const tair_serv_Tair_set_loglevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_set_loglevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_set_loglevel_presult {
 public:


  virtual ~tair_serv_Tair_set_loglevel_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tair_serv_Tair_put_args__isset {
  _tair_serv_Tair_put_args__isset() : area(false), key(false), data(false), expire(false), version(false) {}
  bool area :1;
  bool key :1;
  bool data :1;
  bool expire :1;
  bool version :1;
} _tair_serv_Tair_put_args__isset;

class tair_serv_Tair_put_args {
 public:

  tair_serv_Tair_put_args(const tair_serv_Tair_put_args&);
  tair_serv_Tair_put_args& operator=(const tair_serv_Tair_put_args&);
  tair_serv_Tair_put_args() : area(0), expire(0), version(0) {
  }

  virtual ~tair_serv_Tair_put_args() throw();
  int32_t area;
  Tair_data_pair key;
  Tair_data_pair data;
  int32_t expire;
  int32_t version;

  _tair_serv_Tair_put_args__isset __isset;

  void __set_area(const int32_t val);

  void __set_key(const Tair_data_pair& val);

  void __set_data(const Tair_data_pair& val);

  void __set_expire(const int32_t val);

  void __set_version(const int32_t val);

  bool operator == (const tair_serv_Tair_put_args & rhs) const
  {
    if (!(area == rhs.area))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(expire == rhs.expire))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_put_pargs {
 public:


  virtual ~tair_serv_Tair_put_pargs() throw();
  const int32_t* area;
  const Tair_data_pair* key;
  const Tair_data_pair* data;
  const int32_t* expire;
  const int32_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_put_result__isset {
  _tair_serv_Tair_put_result__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_put_result__isset;

class tair_serv_Tair_put_result {
 public:

  tair_serv_Tair_put_result(const tair_serv_Tair_put_result&);
  tair_serv_Tair_put_result& operator=(const tair_serv_Tair_put_result&);
  tair_serv_Tair_put_result() : success(0) {
  }

  virtual ~tair_serv_Tair_put_result() throw();
  int32_t success;

  _tair_serv_Tair_put_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const tair_serv_Tair_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_put_presult__isset {
  _tair_serv_Tair_put_presult__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_put_presult__isset;

class tair_serv_Tair_put_presult {
 public:


  virtual ~tair_serv_Tair_put_presult() throw();
  int32_t* success;

  _tair_serv_Tair_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tair_serv_Tair_get_args__isset {
  _tair_serv_Tair_get_args__isset() : are(false), key(false), data(false) {}
  bool are :1;
  bool key :1;
  bool data :1;
} _tair_serv_Tair_get_args__isset;

class tair_serv_Tair_get_args {
 public:

  tair_serv_Tair_get_args(const tair_serv_Tair_get_args&);
  tair_serv_Tair_get_args& operator=(const tair_serv_Tair_get_args&);
  tair_serv_Tair_get_args() : are(0) {
  }

  virtual ~tair_serv_Tair_get_args() throw();
  int32_t are;
  Tair_data_pair key;
  Tair_data_pair data;

  _tair_serv_Tair_get_args__isset __isset;

  void __set_are(const int32_t val);

  void __set_key(const Tair_data_pair& val);

  void __set_data(const Tair_data_pair& val);

  bool operator == (const tair_serv_Tair_get_args & rhs) const
  {
    if (!(are == rhs.are))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_get_pargs {
 public:


  virtual ~tair_serv_Tair_get_pargs() throw();
  const int32_t* are;
  const Tair_data_pair* key;
  const Tair_data_pair* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_get_result__isset {
  _tair_serv_Tair_get_result__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_get_result__isset;

class tair_serv_Tair_get_result {
 public:

  tair_serv_Tair_get_result(const tair_serv_Tair_get_result&);
  tair_serv_Tair_get_result& operator=(const tair_serv_Tair_get_result&);
  tair_serv_Tair_get_result() : success(0) {
  }

  virtual ~tair_serv_Tair_get_result() throw();
  int32_t success;

  _tair_serv_Tair_get_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const tair_serv_Tair_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_get_presult__isset {
  _tair_serv_Tair_get_presult__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_get_presult__isset;

class tair_serv_Tair_get_presult {
 public:


  virtual ~tair_serv_Tair_get_presult() throw();
  int32_t* success;

  _tair_serv_Tair_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tair_serv_Tair_remove_args__isset {
  _tair_serv_Tair_remove_args__isset() : area(false), key(false) {}
  bool area :1;
  bool key :1;
} _tair_serv_Tair_remove_args__isset;

class tair_serv_Tair_remove_args {
 public:

  tair_serv_Tair_remove_args(const tair_serv_Tair_remove_args&);
  tair_serv_Tair_remove_args& operator=(const tair_serv_Tair_remove_args&);
  tair_serv_Tair_remove_args() : area(0) {
  }

  virtual ~tair_serv_Tair_remove_args() throw();
  int32_t area;
  Tair_data_pair key;

  _tair_serv_Tair_remove_args__isset __isset;

  void __set_area(const int32_t val);

  void __set_key(const Tair_data_pair& val);

  bool operator == (const tair_serv_Tair_remove_args & rhs) const
  {
    if (!(area == rhs.area))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tair_serv_Tair_remove_pargs {
 public:


  virtual ~tair_serv_Tair_remove_pargs() throw();
  const int32_t* area;
  const Tair_data_pair* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_remove_result__isset {
  _tair_serv_Tair_remove_result__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_remove_result__isset;

class tair_serv_Tair_remove_result {
 public:

  tair_serv_Tair_remove_result(const tair_serv_Tair_remove_result&);
  tair_serv_Tair_remove_result& operator=(const tair_serv_Tair_remove_result&);
  tair_serv_Tair_remove_result() : success(0) {
  }

  virtual ~tair_serv_Tair_remove_result() throw();
  int32_t success;

  _tair_serv_Tair_remove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const tair_serv_Tair_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const tair_serv_Tair_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tair_serv_Tair_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tair_serv_Tair_remove_presult__isset {
  _tair_serv_Tair_remove_presult__isset() : success(false) {}
  bool success :1;
} _tair_serv_Tair_remove_presult__isset;

class tair_serv_Tair_remove_presult {
 public:


  virtual ~tair_serv_Tair_remove_presult() throw();
  int32_t* success;

  _tair_serv_Tair_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class tair_servClient : virtual public tair_servIf {
 public:
  tair_servClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  tair_servClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name);
  void send_Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name);
  int32_t recv_Tair_begin();
  void Tair_set_loglevel(const std::string& level);
  void send_Tair_set_loglevel(const std::string& level);
  void recv_Tair_set_loglevel();
  int32_t Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version);
  void send_Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version);
  int32_t recv_Tair_put();
  int32_t Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data);
  void send_Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data);
  int32_t recv_Tair_get();
  int32_t Tair_remove(const int32_t area, const Tair_data_pair& key);
  void send_Tair_remove(const int32_t area, const Tair_data_pair& key);
  int32_t recv_Tair_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class tair_servProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<tair_servIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (tair_servProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Tair_begin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tair_set_loglevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tair_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tair_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tair_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  tair_servProcessor(boost::shared_ptr<tair_servIf> iface) :
    iface_(iface) {
    processMap_["Tair_begin"] = &tair_servProcessor::process_Tair_begin;
    processMap_["Tair_set_loglevel"] = &tair_servProcessor::process_Tair_set_loglevel;
    processMap_["Tair_put"] = &tair_servProcessor::process_Tair_put;
    processMap_["Tair_get"] = &tair_servProcessor::process_Tair_get;
    processMap_["Tair_remove"] = &tair_servProcessor::process_Tair_remove;
  }

  virtual ~tair_servProcessor() {}
};

class tair_servProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  tair_servProcessorFactory(const ::boost::shared_ptr< tair_servIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< tair_servIfFactory > handlerFactory_;
};

class tair_servMultiface : virtual public tair_servIf {
 public:
  tair_servMultiface(std::vector<boost::shared_ptr<tair_servIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~tair_servMultiface() {}
 protected:
  std::vector<boost::shared_ptr<tair_servIf> > ifaces_;
  tair_servMultiface() {}
  void add(boost::shared_ptr<tair_servIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tair_begin(master_addr, slave_addr, group_name);
    }
    return ifaces_[i]->Tair_begin(master_addr, slave_addr, group_name);
  }

  void Tair_set_loglevel(const std::string& level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tair_set_loglevel(level);
    }
    ifaces_[i]->Tair_set_loglevel(level);
  }

  int32_t Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tair_put(area, key, data, expire, version);
    }
    return ifaces_[i]->Tair_put(area, key, data, expire, version);
  }

  int32_t Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tair_get(are, key, data);
    }
    return ifaces_[i]->Tair_get(are, key, data);
  }

  int32_t Tair_remove(const int32_t area, const Tair_data_pair& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tair_remove(area, key);
    }
    return ifaces_[i]->Tair_remove(area, key);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class tair_servConcurrentClient : virtual public tair_servIf {
 public:
  tair_servConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  tair_servConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name);
  int32_t send_Tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name);
  int32_t recv_Tair_begin(const int32_t seqid);
  void Tair_set_loglevel(const std::string& level);
  int32_t send_Tair_set_loglevel(const std::string& level);
  void recv_Tair_set_loglevel(const int32_t seqid);
  int32_t Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version);
  int32_t send_Tair_put(const int32_t area, const Tair_data_pair& key, const Tair_data_pair& data, const int32_t expire, const int32_t version);
  int32_t recv_Tair_put(const int32_t seqid);
  int32_t Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data);
  int32_t send_Tair_get(const int32_t are, const Tair_data_pair& key, const Tair_data_pair& data);
  int32_t recv_Tair_get(const int32_t seqid);
  int32_t Tair_remove(const int32_t area, const Tair_data_pair& key);
  int32_t send_Tair_remove(const int32_t area, const Tair_data_pair& key);
  int32_t recv_Tair_remove(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
