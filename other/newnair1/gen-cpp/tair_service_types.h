/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tair_service_TYPES_H
#define tair_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tair_thrift {

class Tair_data_pair;

typedef struct _Tair_data_pair__isset {
  _Tair_data_pair__isset() : len(false), data(false) {}
  bool len :1;
  bool data :1;
} _Tair_data_pair__isset;

class Tair_data_pair {
 public:

  Tair_data_pair(const Tair_data_pair&);
  Tair_data_pair& operator=(const Tair_data_pair&);
  Tair_data_pair() : len(0), data() {
  }

  virtual ~Tair_data_pair() throw();
  int64_t len;
  std::string data;

  _Tair_data_pair__isset __isset;

  void __set_len(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const Tair_data_pair & rhs) const
  {
    if (!(len == rhs.len))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Tair_data_pair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tair_data_pair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tair_data_pair &a, Tair_data_pair &b);

inline std::ostream& operator<<(std::ostream& out, const Tair_data_pair& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
