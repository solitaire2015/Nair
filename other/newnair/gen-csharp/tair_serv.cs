/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class tair_serv {
  public interface Iface {
    int tair_begin(string master_addr, string slave_addr, string group_name);
    #if SILVERLIGHT
    IAsyncResult Begin_tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name);
    int End_tair_begin(IAsyncResult asyncResult);
    #endif
    void tair_set_loglevel(string level);
    #if SILVERLIGHT
    IAsyncResult Begin_tair_set_loglevel(AsyncCallback callback, object state, string level);
    void End_tair_set_loglevel(IAsyncResult asyncResult);
    #endif
    int tair_put(int area, tair_data_pair key, tair_data_pair data, int expire, int version);
    #if SILVERLIGHT
    IAsyncResult Begin_tair_put(AsyncCallback callback, object state, int area, tair_data_pair key, tair_data_pair data, int expire, int version);
    int End_tair_put(IAsyncResult asyncResult);
    #endif
    int tair_get(int are, tair_data_pair key, tair_data_pair data);
    #if SILVERLIGHT
    IAsyncResult Begin_tair_get(AsyncCallback callback, object state, int are, tair_data_pair key, tair_data_pair data);
    int End_tair_get(IAsyncResult asyncResult);
    #endif
    int tair_remove(int area, tair_data_pair key);
    #if SILVERLIGHT
    IAsyncResult Begin_tair_remove(AsyncCallback callback, object state, int area, tair_data_pair key);
    int End_tair_remove(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name)
    {
      return send_tair_begin(callback, state, master_addr, slave_addr, group_name);
    }

    public int End_tair_begin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tair_begin();
    }

    #endif

    public int tair_begin(string master_addr, string slave_addr, string group_name)
    {
      #if !SILVERLIGHT
      send_tair_begin(master_addr, slave_addr, group_name);
      return recv_tair_begin();

      #else
      var asyncResult = Begin_tair_begin(null, null, master_addr, slave_addr, group_name);
      return End_tair_begin(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tair_begin(AsyncCallback callback, object state, string master_addr, string slave_addr, string group_name)
    #else
    public void send_tair_begin(string master_addr, string slave_addr, string group_name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("tair_begin", TMessageType.Call, seqid_));
      tair_begin_args args = new tair_begin_args();
      args.Master_addr = master_addr;
      args.Slave_addr = slave_addr;
      args.Group_name = group_name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_tair_begin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tair_begin_result result = new tair_begin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tair_begin failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_tair_set_loglevel(AsyncCallback callback, object state, string level)
    {
      return send_tair_set_loglevel(callback, state, level);
    }

    public void End_tair_set_loglevel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_tair_set_loglevel();
    }

    #endif

    public void tair_set_loglevel(string level)
    {
      #if !SILVERLIGHT
      send_tair_set_loglevel(level);
      recv_tair_set_loglevel();

      #else
      var asyncResult = Begin_tair_set_loglevel(null, null, level);
      End_tair_set_loglevel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tair_set_loglevel(AsyncCallback callback, object state, string level)
    #else
    public void send_tair_set_loglevel(string level)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("tair_set_loglevel", TMessageType.Call, seqid_));
      tair_set_loglevel_args args = new tair_set_loglevel_args();
      args.Level = level;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_tair_set_loglevel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tair_set_loglevel_result result = new tair_set_loglevel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_tair_put(AsyncCallback callback, object state, int area, tair_data_pair key, tair_data_pair data, int expire, int version)
    {
      return send_tair_put(callback, state, area, key, data, expire, version);
    }

    public int End_tair_put(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tair_put();
    }

    #endif

    public int tair_put(int area, tair_data_pair key, tair_data_pair data, int expire, int version)
    {
      #if !SILVERLIGHT
      send_tair_put(area, key, data, expire, version);
      return recv_tair_put();

      #else
      var asyncResult = Begin_tair_put(null, null, area, key, data, expire, version);
      return End_tair_put(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tair_put(AsyncCallback callback, object state, int area, tair_data_pair key, tair_data_pair data, int expire, int version)
    #else
    public void send_tair_put(int area, tair_data_pair key, tair_data_pair data, int expire, int version)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("tair_put", TMessageType.Call, seqid_));
      tair_put_args args = new tair_put_args();
      args.Area = area;
      args.Key = key;
      args.Data = data;
      args.Expire = expire;
      args.Version = version;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_tair_put()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tair_put_result result = new tair_put_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tair_put failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_tair_get(AsyncCallback callback, object state, int are, tair_data_pair key, tair_data_pair data)
    {
      return send_tair_get(callback, state, are, key, data);
    }

    public int End_tair_get(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tair_get();
    }

    #endif

    public int tair_get(int are, tair_data_pair key, tair_data_pair data)
    {
      #if !SILVERLIGHT
      send_tair_get(are, key, data);
      return recv_tair_get();

      #else
      var asyncResult = Begin_tair_get(null, null, are, key, data);
      return End_tair_get(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tair_get(AsyncCallback callback, object state, int are, tair_data_pair key, tair_data_pair data)
    #else
    public void send_tair_get(int are, tair_data_pair key, tair_data_pair data)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("tair_get", TMessageType.Call, seqid_));
      tair_get_args args = new tair_get_args();
      args.Are = are;
      args.Key = key;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_tair_get()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tair_get_result result = new tair_get_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tair_get failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_tair_remove(AsyncCallback callback, object state, int area, tair_data_pair key)
    {
      return send_tair_remove(callback, state, area, key);
    }

    public int End_tair_remove(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_tair_remove();
    }

    #endif

    public int tair_remove(int area, tair_data_pair key)
    {
      #if !SILVERLIGHT
      send_tair_remove(area, key);
      return recv_tair_remove();

      #else
      var asyncResult = Begin_tair_remove(null, null, area, key);
      return End_tair_remove(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tair_remove(AsyncCallback callback, object state, int area, tair_data_pair key)
    #else
    public void send_tair_remove(int area, tair_data_pair key)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("tair_remove", TMessageType.Call, seqid_));
      tair_remove_args args = new tair_remove_args();
      args.Area = area;
      args.Key = key;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_tair_remove()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tair_remove_result result = new tair_remove_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "tair_remove failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["tair_begin"] = tair_begin_Process;
      processMap_["tair_set_loglevel"] = tair_set_loglevel_Process;
      processMap_["tair_put"] = tair_put_Process;
      processMap_["tair_get"] = tair_get_Process;
      processMap_["tair_remove"] = tair_remove_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void tair_begin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tair_begin_args args = new tair_begin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tair_begin_result result = new tair_begin_result();
      result.Success = iface_.tair_begin(args.Master_addr, args.Slave_addr, args.Group_name);
      oprot.WriteMessageBegin(new TMessage("tair_begin", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tair_set_loglevel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tair_set_loglevel_args args = new tair_set_loglevel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tair_set_loglevel_result result = new tair_set_loglevel_result();
      iface_.tair_set_loglevel(args.Level);
      oprot.WriteMessageBegin(new TMessage("tair_set_loglevel", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tair_put_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tair_put_args args = new tair_put_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tair_put_result result = new tair_put_result();
      result.Success = iface_.tair_put(args.Area, args.Key, args.Data, args.Expire, args.Version);
      oprot.WriteMessageBegin(new TMessage("tair_put", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tair_get_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tair_get_args args = new tair_get_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tair_get_result result = new tair_get_result();
      result.Success = iface_.tair_get(args.Are, args.Key, args.Data);
      oprot.WriteMessageBegin(new TMessage("tair_get", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tair_remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tair_remove_args args = new tair_remove_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tair_remove_result result = new tair_remove_result();
      result.Success = iface_.tair_remove(args.Area, args.Key);
      oprot.WriteMessageBegin(new TMessage("tair_remove", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_begin_args : TBase
  {
    private string _master_addr;
    private string _slave_addr;
    private string _group_name;

    public string Master_addr
    {
      get
      {
        return _master_addr;
      }
      set
      {
        __isset.master_addr = true;
        this._master_addr = value;
      }
    }

    public string Slave_addr
    {
      get
      {
        return _slave_addr;
      }
      set
      {
        __isset.slave_addr = true;
        this._slave_addr = value;
      }
    }

    public string Group_name
    {
      get
      {
        return _group_name;
      }
      set
      {
        __isset.group_name = true;
        this._group_name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool master_addr;
      public bool slave_addr;
      public bool group_name;
    }

    public tair_begin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Master_addr = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Slave_addr = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Group_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_begin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Master_addr != null && __isset.master_addr) {
          field.Name = "master_addr";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Master_addr);
          oprot.WriteFieldEnd();
        }
        if (Slave_addr != null && __isset.slave_addr) {
          field.Name = "slave_addr";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Slave_addr);
          oprot.WriteFieldEnd();
        }
        if (Group_name != null && __isset.group_name) {
          field.Name = "group_name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Group_name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_begin_args(");
      bool __first = true;
      if (Master_addr != null && __isset.master_addr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Master_addr: ");
        __sb.Append(Master_addr);
      }
      if (Slave_addr != null && __isset.slave_addr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slave_addr: ");
        __sb.Append(Slave_addr);
      }
      if (Group_name != null && __isset.group_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Group_name: ");
        __sb.Append(Group_name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_begin_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tair_begin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_begin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_begin_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_set_loglevel_args : TBase
  {
    private string _level;

    public string Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool level;
    }

    public tair_set_loglevel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Level = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_set_loglevel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Level != null && __isset.level) {
          field.Name = "level";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_set_loglevel_args(");
      bool __first = true;
      if (Level != null && __isset.level) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Level: ");
        __sb.Append(Level);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_set_loglevel_result : TBase
  {

    public tair_set_loglevel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_set_loglevel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_set_loglevel_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_put_args : TBase
  {
    private int _area;
    private tair_data_pair _key;
    private tair_data_pair _data;
    private int _expire;
    private int _version;

    public int Area
    {
      get
      {
        return _area;
      }
      set
      {
        __isset.area = true;
        this._area = value;
      }
    }

    public tair_data_pair Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public tair_data_pair Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public int Expire
    {
      get
      {
        return _expire;
      }
      set
      {
        __isset.expire = true;
        this._expire = value;
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool area;
      public bool key;
      public bool data;
      public bool expire;
      public bool version;
    }

    public tair_put_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Area = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Key = new tair_data_pair();
                Key.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Data = new tair_data_pair();
                Data.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Expire = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_put_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.area) {
          field.Name = "area";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Area);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Key.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Data.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.expire) {
          field.Name = "expire";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Expire);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_put_args(");
      bool __first = true;
      if (__isset.area) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Area: ");
        __sb.Append(Area);
      }
      if (Key != null && __isset.key) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key== null ? "<null>" : Key.ToString());
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data== null ? "<null>" : Data.ToString());
      }
      if (__isset.expire) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Expire: ");
        __sb.Append(Expire);
      }
      if (__isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_put_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tair_put_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_put_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_put_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_get_args : TBase
  {
    private int _are;
    private tair_data_pair _key;
    private tair_data_pair _data;

    public int Are
    {
      get
      {
        return _are;
      }
      set
      {
        __isset.are = true;
        this._are = value;
      }
    }

    public tair_data_pair Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public tair_data_pair Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool are;
      public bool key;
      public bool data;
    }

    public tair_get_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Are = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Key = new tair_data_pair();
                Key.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Data = new tair_data_pair();
                Data.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.are) {
          field.Name = "are";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Are);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Key.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Data.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_get_args(");
      bool __first = true;
      if (__isset.are) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Are: ");
        __sb.Append(Are);
      }
      if (Key != null && __isset.key) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key== null ? "<null>" : Key.ToString());
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data== null ? "<null>" : Data.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_get_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tair_get_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_get_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_remove_args : TBase
  {
    private int _area;
    private tair_data_pair _key;

    public int Area
    {
      get
      {
        return _area;
      }
      set
      {
        __isset.area = true;
        this._area = value;
      }
    }

    public tair_data_pair Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool area;
      public bool key;
    }

    public tair_remove_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Area = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Key = new tair_data_pair();
                Key.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_remove_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.area) {
          field.Name = "area";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Area);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Key.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_remove_args(");
      bool __first = true;
      if (__isset.area) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Area: ");
        __sb.Append(Area);
      }
      if (Key != null && __isset.key) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key== null ? "<null>" : Key.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tair_remove_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public tair_remove_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tair_remove_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tair_remove_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
