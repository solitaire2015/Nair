// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "tair_serv.h"
#include <concurrency/ThreadManager.h> 
#include <concurrency/PosixThreadFactory.h> 

#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <server/TNonblockingServer.h>    

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace::apache::thrift::concurrency;    

using  std::string;

using  std::wstring;

using boost::shared_ptr;

using namespace  ::tair_thrift;

class tair_servHandler : virtual public tair_servIf {
 public:
  tair_servHandler() {
    
  }

  int32_t tair_begin(const std::string& master_addr, const std::string& slave_addr, const std::string& group_name) {
    // Your implementation goes here
	  printf("master:%s ,slave:%s , group:%s\n", (string)master_addr, (string)slave_addr, (string)group_name);
	if (group_name == "craig")
		return 1;
	else
		return 0;
  }

  void tair_set_loglevel(const std::string& level) {
    // Your implementation goes here
    printf("tair_set_loglevel\n");
  }

  int32_t tair_put(const int32_t area, const tair_data_pair& key, const tair_data_pair& data, const int32_t expire, const int32_t version) {
    // Your implementation goes here
    printf("tair_put\n");
  }

  int32_t tair_get(const int32_t are, const tair_data_pair& key, const tair_data_pair& data) {
    // Your implementation goes here
    printf("tair_get\n");
  }

  int32_t tair_remove(const int32_t area, const tair_data_pair& key) {
    // Your implementation goes here
    printf("tair_remove\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<tair_servHandler> handler(new tair_servHandler());
  shared_ptr<TProcessor> processor(new tair_servProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory()); //PosixThreadFactory可以自定义（继承于ThreadFactory）

  shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(THREAD_NUM);
  threadManager->threadFactory(threadFactory);
  threadManager->start();
  TNonblockingServer server(processor, protocolFactory, port, threadManager);
  //TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

